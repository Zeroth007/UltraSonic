<Window x:Class="UltraSonic.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:UltraSonic" Icon="Images/ultrasonic-logo.ico" Title="UltraSonic" Height="700" Width="1030" MinWidth="1030" MinHeight="700" Closed="WindowClosed">
    <Window.Resources>
        <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TreeViewItem">
                        <StackPanel>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" MinWidth="19"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <ToggleButton IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Name="Expander">
                                    <ToggleButton.Style>
                                        <Style TargetType="ToggleButton">
                                            <Setter Property="UIElement.Focusable" Value="false"/>
                                            <Setter Property="FrameworkElement.Width" Value="16"/>
                                            <Setter Property="FrameworkElement.Height" Value="16"/>
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ToggleButton">
                                                        <Border Padding="5,5,5,5" Background="#00FFFFFF" Width="16" Height="16">
                                                            <Path Fill="#00FFFFFF" Stroke="#FF989898" Name="ExpandPath">
                                                                <Path.Data>
                                                                    <PathGeometry Figures="M0,0L0,6L6,0z"/>
                                                                </Path.Data>
                                                                <Path.RenderTransform>
                                                                    <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
                                                                </Path.RenderTransform>
                                                            </Path>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="UIElement.IsMouseOver" Value="True">
                                                                <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF1BBBFA"/>
                                                                <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#00FFFFFF"/>
                                                            </Trigger>
                                                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                                <Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
                                                                    <Setter.Value>
                                                                        <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#FF595959"/>
                                                                <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF262626"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <Border x:Name="Bd" HorizontalAlignment="Stretch" BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Panel.Background}" SnapsToDevicePixels="True" Grid.Column="1">
                                    <ContentPresenter x:Name="PART_Header" Content="{TemplateBinding HeaderedContentControl.Header}" ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}" ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}" ContentSource="Header" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                </Border>
                                <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1"/>
                            </Grid>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TreeViewItem.IsExpanded" Value="False">
                                <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="ItemsControl.HasItems" Value="False">
                                <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden"/>
                            </Trigger>
                            <Trigger Property="TreeViewItem.IsSelected" Value="True">
                                <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="TreeViewItem.IsSelected" Value="True"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            </MultiTrigger>
                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="StyleCustomCheckBox" TargetType="{x:Type CheckBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <StackPanel Orientation="Horizontal">
                            <Image x:Name="imageCheckBox" Source="Images/star-active2.png" Width="20" Height="20"/>
                            <ContentPresenter VerticalAlignment="Center"/>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="imageCheckBox" Property="Source" Value="Images/star-inactive.png"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FlashingHeader" TargetType="TabItem">
            <Setter Property="TabItem.HeaderTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <!--Make The Header -->
                        <TextBlock x:Name="header" Foreground ="Black" Text="{Binding}"/>
                        <!--Make The Background Flash-->
                        <DataTemplate.Triggers>
                            <Trigger Property="Visibility" Value="Visible">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard Storyboard.TargetName="header" AutoReverse="True" RepeatBehavior="Forever" Storyboard.TargetProperty="Foreground.Color">
                                            <ColorAnimation To="Transparent" AutoReverse="True" Duration="0:0:.75"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                            </Trigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <DataTemplate x:Key="ChatMessageUserCellTemplate">
            <TextBlock FontWeight="Bold" Foreground="Black" TextAlignment="Center">
                <TextBlock.Text>
                    <MultiBinding StringFormat="{}&lt;{0}&gt;">
                        <Binding Path="User"/>
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>
        </DataTemplate>
        <DataTemplate x:Key="ChatMessageTimeStampCellTemplate">
            <TextBlock Foreground="Black" TextAlignment="Center">
                <TextBlock.Text>
                    <MultiBinding StringFormat="{}[{0}]">
                        <Binding Path="TimeStamp"/>
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>
        </DataTemplate>
        <DataTemplate x:Key="ChatMessageCellTemplate">
            <TextBlock FontWeight="Normal" Foreground="Black" TextAlignment="Left" Text="{Binding Path=Message}" Width="Auto"/>
        </DataTemplate>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="MediaCommands.Play" Executed="PlayButtonClick" CanExecute="CommandCanExecute"/>
        <CommandBinding Command="MediaCommands.Stop" Executed="StopButtonClick" CanExecute="CommandCanExecute"/>
        <CommandBinding Command="MediaCommands.Pause" Executed="PauseButtonClick" CanExecute="CommandCanExecute"/>
        <CommandBinding Command="MediaCommands.PreviousTrack" Executed="PreviousButtonClick" CanExecute="PreviousCanExecute"/>
        <CommandBinding Command="MediaCommands.NextTrack" Executed="NextButtonClick" CanExecute="NextCanExecute"/>
    </Window.CommandBindings>
    <Window.TaskbarItemInfo>
        <TaskbarItemInfo>
            <TaskbarItemInfo.ThumbButtonInfos>
                <ThumbButtonInfoCollection>
                    <ThumbButtonInfo Description="Previous" DismissWhenClicked="False" Command="MediaCommands.PreviousTrack" CommandTarget="{Binding ElementName=PreviousButton}" ImageSource="Images/media-skip-backward-dark-16.png"/>
                    <ThumbButtonInfo Description="Play" DismissWhenClicked="False" Command="MediaCommands.Play" CommandTarget="{Binding ElementName=PlayButton}" ImageSource="Images/media-playback-start-dark-16.png"/>
                    <ThumbButtonInfo Description="Pause" DismissWhenClicked="False" Command="MediaCommands.Pause" CommandTarget="{Binding ElementName=PauseButton}" ImageSource="Images/media-playback-pause-dark-16.png"/>
                    <ThumbButtonInfo Description="Stop" DismissWhenClicked="False" Command="MediaCommands.Stop" CommandTarget="{Binding ElementName=StopButton}" ImageSource="Images/media-playback-stop-dark-16.png"/>
                    <ThumbButtonInfo Description="Next" DismissWhenClicked="False" Command="MediaCommands.NextTrack" CommandTarget="{Binding ElementName=NextButton}" ImageSource="Images/media-skip-forward-dark-16.png"/>
                </ThumbButtonInfoCollection>
            </TaskbarItemInfo.ThumbButtonInfos>
        </TaskbarItemInfo>
    </Window.TaskbarItemInfo>
    <Grid x:Name="MainGrid">
        <Grid.RowDefinitions>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="1*"/>
        </Grid.ColumnDefinitions>
        <StatusBar VerticalAlignment="Bottom" Height="29" Grid.ColumnSpan="3">
            <DockPanel>
                <StatusBarItem x:Name="MusicTimeRemainingLabel" Width="100" FontSize="10"/>
                <StatusBarItem x:Name="MusicPlayStatusLabel" Width="100" FontSize="10"/>
                <StatusBarItem x:Name="SearchStatusLabel" Width="100" FontSize="10"/>
                <StatusBarItem x:Name="DownloadStatusLabel" Width="200" FontSize="10"/>
            </DockPanel>
        </StatusBar>
        <TabControl Margin="10,5,10,108" Grid.ColumnSpan="3">
            <TabItem Header="Music" x:Name="MusicTab">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="1*"/>
                        <RowDefinition Height="1*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>
                    <DockPanel Grid.Column="0" Grid.ColumnSpan="1" Grid.RowSpan="3">
                        <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" BorderThickness="1">
                            <TextBlock Text="Artists" FontWeight="Bold" FontSize="12" Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" HorizontalAlignment="Center"/>
                        </Border>
                        <TreeView DockPanel.Dock="Top" x:Name="ArtistTreeView" ItemsSource="{Binding}" DataContext="{Binding local:MainWindow.ArtistItems}" SelectedItemChanged="ArtistTreeViewSelectedItemChanged" UseLayoutRounding="True" VerticalContentAlignment="Top" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <TreeView.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Refresh" Click="ArtistRefreshClick"/>
                                    <MenuItem Header="Expand All" Click="ExpandAllArtistsClick"/>
                                    <MenuItem Header="Collapse All" Click="CollapseAllArtistsClick"/>
                                </ContextMenu>
                            </TreeView.ContextMenu>
                            <TreeView.Resources>
                                <HierarchicalDataTemplate DataType="{x:Type local:ArtistItem}" ItemsSource="{Binding Path=Children}">
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text="{Binding Path=Name}"/>
                                    </StackPanel>
                                </HierarchicalDataTemplate>
                            </TreeView.Resources>
                        </TreeView>
                    </DockPanel>
                    <DockPanel Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="0" Grid.RowSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" BorderThickness="1">
                            <TextBlock Text="Albums" FontWeight="Bold" FontSize="12" Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" HorizontalAlignment="Center"/>
                        </Border>
                        <DataGrid DockPanel.Dock="Top" LoadingRow="DataGridLoadingRow" TargetUpdated="DgTargetUpdated" x:Name="AlbumDataGrid" GridLinesVisibility="None" MouseLeftButtonUp="AlbumDataGridSelectionChanged" MouseDoubleClick="AlbumDataGridMouseDoubleClick" CanUserResizeRows="False" CanUserAddRows="False" CanUserDeleteRows="False" RowBackground="White" Background="White" AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Icon="" Header="Add To Playlist" Click="AlbumDataGridAddClick"/>
                                    <MenuItem x:Name="AlbumDataGridDownload" Header="Download" Click="AlbumDataGridDownloadClick"/>
                                    <MenuItem x:Name="AlbumDataGridEnableCoverArt" Click="AlbumDataGridEnableCoverArtClick"/>
                                    <Separator/>
                                    <MenuItem Header="Random" Click="AlbumDataGridAlbumListClick"/>
                                    <MenuItem Header="Newest" Click="AlbumDataGridAlbumListClick"/>
                                    <MenuItem Header="Highest Rated" Click="AlbumDataGridAlbumListClick"/>
                                    <MenuItem Header="Frequently Played" Click="AlbumDataGridAlbumListClick"/>
                                    <MenuItem Header="Recently Played" Click="AlbumDataGridAlbumListClick"/>
                                    <MenuItem x:Name="AlbumDataGridStarred" Header="Starred" Click="AlbumDataGridAlbumListClick"/>
                                    <MenuItem x:Name="AlbumDataGridNext" Visibility="Collapsed" Click="AlbumDataGridNextClick"/>
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                            <DataGrid.Columns>
                                <DataGridTemplateColumn>
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <CheckBox Style="{StaticResource StyleCustomCheckBox}" x:Name="AlbumDataGridStarredCheckbox" IsThreeState="False" IsChecked="{Binding Path=Starred, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Click="StarredCheckBoxClick"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn x:Name="AlbumDataGridAlbumArtColumn">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <Image Source="{Binding Image, NotifyOnTargetUpdated=True}" Height="{Binding AlbumArtSize}" Width="{Binding AlbumArtSize}"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Play">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <Image x:Name="PlayTrackImage" Source="Images\media-playback-start.png" Width="20" Height="20"  MouseLeftButtonDown="PlayAlbumImageMouseLeftButtonDown"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>                                
                                <DataGridTemplateColumn Header="Artist" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding Artist}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Album" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding Name}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                    </DockPanel>
                    <DockPanel Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1" Grid.RowSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" BorderThickness="1">
                            <TextBlock Text="Tracks" FontWeight="Bold" FontSize="12" Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" HorizontalAlignment="Center"/>
                        </Border>
                        <DataGrid DockPanel.Dock="Top" ItemsSource="{Binding}" IsSynchronizedWithCurrentItem="true" TargetUpdated="DgTargetUpdated" x:Name="TrackDataGrid" GridLinesVisibility="None" CanUserResizeRows="False" CanUserAddRows="False" CanUserDeleteRows="False" RowBackground="White" Background="White" AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" MouseDoubleClick="TrackDataGridMouseDoubleClick" SelectionMode="Extended" LoadingRow="DataGridLoadingRow" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Add To Playlist" Click="TrackDataGridAddClick"/>
                                    <MenuItem x:Name="TrackDataGridDownload" Header="Download" Click="TrackDataGridDownloadClick"/>
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                            <DataGrid.Columns>
                                <DataGridTemplateColumn x:Name="TrackDataGridStarred">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <CheckBox Style="{StaticResource StyleCustomCheckBox}" x:Name="StarredCheckbox" IsThreeState="False" IsChecked="{Binding Path=Starred, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Click="StarredCheckBoxClick"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Play">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <Image x:Name="PlayTrackImage" Source="Images\media-playback-start.png" Width="20" Height="20"  MouseLeftButtonDown="PlayTrackImageMouseLeftButtonDown"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Disc" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding DiscNumber}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Track" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding TrackNumber}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Artist" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding Artist}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Title" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding Title, NotifyOnTargetUpdated=True}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Album" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding Album}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Genre" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding Genre}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Year" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding Year}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Duration" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding Duration}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="BitRate" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding BitRate}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Cached">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <CheckBox x:Name="CachedCheckbox" IsThreeState="False" IsChecked="{Binding Path=Cached, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                    </DockPanel>
                </Grid>
            </TabItem>
            <TabItem Header="Playlists" x:Name="PlaylistTab">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>
                    <DockPanel Grid.Column="0" Grid.ColumnSpan="1">
                        <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" BorderThickness="1">
                            <TextBlock Text="Playlists" FontWeight="Bold" FontSize="12" Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" HorizontalAlignment="Center"/>
                        </Border>
                        <DataGrid DockPanel.Dock="Top" x:Name="PlaylistsDataGrid" GridLinesVisibility="None" CanUserResizeRows="False" CanUserAddRows="False" CanUserDeleteRows="False" RowBackground="White" Background="White" AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" MouseDoubleClick="PlaylistsDataGridSelectionChanged" LoadingRow="DataGridLoadingRow">
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem x:Name="PlaylistsGridDeletePlaylist" Header="Delete Playlist" Click="PlaylistsDataGridDeletePlaylistClick"/>
                                    <MenuItem Header="Refresh" Click="PlaylistsDataGridRefreshClick"/>
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                            <DataGrid.Columns>
                                <DataGridTextColumn Binding="{Binding Name}" Header="Name" IsReadOnly="True" Width="auto"/>
                                <DataGridTextColumn Binding="{Binding Tracks}" Header="Titles" IsReadOnly="True" Width="auto"/>
                                <DataGridTextColumn Binding="{Binding Duration}" Header="Duration" IsReadOnly="True" Width="auto"/>
                            </DataGrid.Columns>
                        </DataGrid>
                    </DockPanel>
                    <DockPanel Grid.Column="1" Grid.ColumnSpan="2">
                        <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" BorderThickness="1">
                            <TextBlock Text="Playlist Tracks" FontWeight="Bold" FontSize="12" Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" HorizontalAlignment="Center"/>
                        </Border>
                        <DataGrid DockPanel.Dock="Top" x:Name="PlaylistTrackGrid" SelectionMode="Single" GridLinesVisibility="None" CanUserResizeRows="False" CanUserAddRows="False" CanUserDeleteRows="True" RowBackground="White" Background="White" AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" LoadingRow="DataGridLoadingRow" MouseDoubleClick="PlaylistTrackGridMouseDoubleClick" ItemsSource="{Binding}" Grid.Column="1" Grid.ColumnSpan="2">
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem x:Name="PlaylistTrackGridDownload" Header="Download" Click="PlaylistTrackGridDownloadClick"/>
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                            <DataGrid.Columns>
                                <DataGridTemplateColumn x:Name="PlaylistGridStarred">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <CheckBox Style="{StaticResource StyleCustomCheckBox}" x:Name="StarredCheckbox" IsThreeState="False" IsChecked="{Binding Path=Starred, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Click="StarredCheckBoxClick"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTextColumn Binding="{Binding DiscNumber}" Header="Disc" IsReadOnly="True"/>
                                <DataGridTextColumn Binding="{Binding TrackNumber}" Header="Title" IsReadOnly="True"/>
                                <DataGridTextColumn Binding="{Binding Artist}" Header="Artist" IsReadOnly="True"/>
                                <DataGridTextColumn Binding="{Binding Title}" Header="Title" IsReadOnly="True"/>
                                <DataGridTextColumn Binding="{Binding Album}" Header="Album" IsReadOnly="True"/>
                                <DataGridTextColumn Binding="{Binding Genre}" Header="Genre" IsReadOnly="True"/>
                                <DataGridTextColumn Binding="{Binding Year}" Header="Year" IsReadOnly="True"/>
                                <DataGridTextColumn Binding="{Binding Duration}" Header="Duration" IsReadOnly="True"/>
                                <DataGridTextColumn Binding="{Binding BitRate}" Header="BitRate" IsReadOnly="True"/>
                            </DataGrid.Columns>
                        </DataGrid>
                    </DockPanel>
                    <!-- Drag and Drop Popup -->
                    <Popup x:Name="PlaylistDragPopup" IsHitTestVisible="False" Placement="RelativePoint" PlacementTarget="{Binding ElementName=me}" AllowsTransparency="True">
                        <Border BorderBrush="Black" BorderThickness="1" Background="White" Opacity="0.75">
                            <StackPanel>
                                <Image Source="/Images/view-sort.png" Width="36" Height="36"/>
                            </StackPanel>
                        </Border>
                    </Popup>
                </Grid>
            </TabItem>
            <TabItem TargetUpdated="DgTargetUpdated" x:Name="SocialTab" Header="Social" GotFocus="SocialTabGotFocus">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="497*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>
                    <DockPanel Grid.Column="0">
                        <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" BorderThickness="1">
                            <TextBlock Text="Recently Played" FontWeight="Bold" FontSize="12" Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" HorizontalAlignment="Center"/>
                        </Border>
                        <DataGrid DockPanel.Dock="Top" x:Name="NowPlayingDataGrid" GridLinesVisibility="None" CanUserResizeRows="False" CanUserAddRows="False" CanUserDeleteRows="False" RowBackground="White" Background="White" AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" HorizontalAlignment="Stretch" MouseDoubleClick="NowPlayingDataGridMouseDoubleClick">
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Refresh" Click="NowPlayingRefreshClick"/>
                                    <MenuItem x:Name="SocialEnableCoverArt" Click="AlbumDataGridEnableCoverArtClick"/>
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                            <DataGrid.Columns>
                                <DataGridTemplateColumn>
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <CheckBox Style="{StaticResource StyleCustomCheckBox}" x:Name="NowPlayingGridStarredCheckbox" IsThreeState="False" IsChecked="{Binding Path=Starred, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Click="StarredCheckBoxClick"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn x:Name="SocalAlbumArtColumn">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <Image Source="{Binding Image, NotifyOnTargetUpdated=True}" Height="{Binding AlbumArtSize}" Width="{Binding AlbumArtSize}"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="User" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding User}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Artist" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding Artist}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Title" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding Title}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="Album" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding Album}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTemplateColumn Header="When" IsReadOnly="True" >
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="4,0,4,0">
                                                <TextBlock Text="{Binding When}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                    </DockPanel>
                    <DockPanel Grid.Column="1">
                        <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" BorderThickness="1">
                            <TextBlock Text="Chat" FontWeight="Bold" FontSize="12" Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" HorizontalAlignment="Center"/>
                        </Border>
                        <TextBox DockPanel.Dock="Top" x:Name="ChatListInput" KeyDown="ChatListTextBoxKeyDown"/>
                        <ListView DockPanel.Dock="Top" x:Name="ChatListView">
                            <ListView.Resources>
                                <Style TargetType="{x:Type GridViewColumnHeader}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </Style>
                            </ListView.Resources>
                            <ListView.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Refresh" Click="ChatListRefreshClick"/>
                                </ContextMenu>
                            </ListView.ContextMenu>
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Width="Auto" CellTemplate="{StaticResource ChatMessageTimeStampCellTemplate}"/>
                                    <GridViewColumn Width="Auto" CellTemplate="{StaticResource ChatMessageUserCellTemplate}"/>
                                    <GridViewColumn Width="Auto" CellTemplate="{StaticResource ChatMessageCellTemplate}"/>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </DockPanel>
                </Grid>
            </TabItem>
            <TabItem x:Name="SettingsTab" Header="Settings">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>
                    <ScrollViewer VerticalScrollBarVisibility="Auto" Grid.Column="0" Grid.ColumnSpan="1">
                        <StackPanel>
                            <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" BorderThickness="1">
                                <TextBlock Text="Settings / Preferences" FontWeight="Bold" FontSize="12" Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" HorizontalAlignment="Center"/>
                            </Border>
                            <Expander x:Name="ServerSettingsExpander" Header="Server Settings" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <StackPanel.Resources>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                        <Style TargetType="{x:Type PasswordBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                    </StackPanel.Resources>
                                    <TextBlock Text="Server Address" HorizontalAlignment="Left" Width="Auto"/>
                                    <TextBox x:Name="SettingsServerAddressTextBox" HorizontalAlignment="Stretch" TextWrapping="NoWrap" ToolTip="Enter Subsonic server address URL"/>
                                    <TextBlock Text="Username" HorizontalAlignment="Left" Width="Auto"/>
                                    <TextBox x:Name="SettingsUsernameTextBox" HorizontalAlignment="Stretch" TextWrapping="NoWrap" ToolTip="Subsonic Username, this is case sensitive"/>
                                    <TextBlock Text="Password" HorizontalAlignment="Left" Width="Auto"/>
                                    <PasswordBox x:Name="SettingsPasswordPasswordBox" HorizontalAlignment="Stretch" ToolTip="Subsonic Password"/>
                                </StackPanel>
                            </Expander>
                            <Expander Header="Proxy Settings" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <StackPanel.Resources>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                        <Style TargetType="{x:Type PasswordBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                        <Style TargetType="{x:Type CheckBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                    </StackPanel.Resources>
                                    <CheckBox x:Name="SettingsUseProxyCheckbox" Content="Use Proxy" HorizontalAlignment="Left" Width="Auto" UseLayoutRounding="True" ClickMode="Press" Checked="SettingsUseProxyCheckboxChecked" Unchecked="SettingsUseProxyCheckboxUnChecked" ToolTip="If enabled, use proxy configuration entered for communication with Subsonic"/>
                                    <TextBlock Text="Proxy Address" HorizontalAlignment="Left" Width="Auto"/>
                                    <TextBox x:Name="SettingsProxyServerAddressTextBox" TextWrapping="NoWrap" Width="Auto" ToolTip="Proxy IP or FQDN"/>
                                    <TextBlock Text="Proxy Port" HorizontalAlignment="Left" Width="Auto"/>
                                    <TextBox x:Name="SettingsProxyServerPortTextBox" TextWrapping="NoWrap" HorizontalAlignment="Left" Width="50" ToolTip="Proxy Port"/>
                                    <TextBlock Text="Proxy Username" HorizontalAlignment="Left" Width="Auto"/>
                                    <TextBox x:Name="SettingsProxyServerUsernameTextBox" TextWrapping="NoWrap" Width="Auto" ToolTip="Proxy Username"/>
                                    <TextBlock Text="Proxy Password" HorizontalAlignment="Left" Width="Auto"/>
                                    <PasswordBox x:Name="SettingsProxyServerPasswordTextBox" Width="Auto" ToolTip="Proxy Password"/>
                                </StackPanel>
                            </Expander>
                            <Expander Header="Social Settings" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <StackPanel.Resources>
                                        <Style TargetType="{x:Type ComboBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                            <Setter Property="Width" Value="50"/>
                                            <Setter Property="Height" Value="25"/>
                                            <Setter Property="HorizontalAlignment" Value="Left"/>
                                        </Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                    </StackPanel.Resources>
                                    <TextBlock Text="Now Playing Interval" HorizontalAlignment="Left" Width="Auto"/>
                                    <ComboBox x:Name="NowPlayingIntervalComboBox" HorizontalAlignment="Left" Width="75" ToolTip="Polling cycle for Now Playing entries, set to 0 to disable"/>
                                    <TextBlock Text="Chat Messages Interval" HorizontalAlignment="Left" Width="Auto"/>
                                    <ComboBox x:Name="ChatMessagesIntervalComboBox" HorizontalAlignment="Left" Width="75" ToolTip="Polling cycle for Chat entries, set to 0 to disable"/>
                                </StackPanel>
                            </Expander>
                            <Expander Header="Playback Preferences" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <StackPanel.Resources>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                        <Style TargetType="{x:Type ComboBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                            <Setter Property="Width" Value="50"/>
                                            <Setter Property="Height" Value="25"/>
                                            <Setter Property="HorizontalAlignment" Value="Left"/>
                                        </Style>
                                        <Style TargetType="{x:Type CheckBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                    </StackPanel.Resources>
                                    <CheckBox x:Name="PlaybackFollowsCursorCheckBox" Content="Playback Follows Cursor" HorizontalAlignment="Left" ToolTip="If enabled, the currently playing track will be selected in the Playlist"/>
                                    <CheckBox x:Name="SaveWorkingPlaylistCheckBox" Content="Save Working Playlist" HorizontalAlignment="Left" ToolTip="If enabled, the current playlist will be restored after the application is closed and re-opened"/>
                                    <CheckBox x:Name="UseDiskCacheCheckBox" Content="Use Disk Cache" HorizontalAlignment="Left" Checked="SettingsUseDiskCacheCheckboxChecked" Unchecked="SettingsUseDiskCacheCheckboxUnChecked" ToolTip="If enabled, save cover art and music to disk for offline playback"/>
                                    <TextBlock Text="Cache Directory" HorizontalAlignment="Left" Width="Auto"/>
                                    <TextBox x:Name="CacheDirectoryTextBox" Width="Auto" ToolTip="Store cover art and music to this location. A subdirectory will be created per server URL"/>
                                    <TextBlock Text="Max Bitrate" HorizontalAlignment="Left" Width="Auto"/>
                                    <ComboBox x:Name="MaxBitrateComboBox" HorizontalAlignment="Left" Width="75" ToolTip="Any songs higher than this bitrate will be transcoded to this bitrate at stream time, set to 0 to disable"/>
                                    <TextBlock Text="Double Click Behavior" HorizontalAlignment="Left" Width="Auto"/>
                                    <ComboBox x:Name="DoubleClickComboBox" HorizontalAlignment="Left" Width="75" ToolTip="Behavior when doubling clicking on a track in the Track view. Play will add the track to the end of the playlist and begin playing. Add will add the track to the end of the playlist."/>
                                </StackPanel>
                            </Expander>
                            <Expander Header="Search Preferences" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <StackPanel.Resources>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                        <Style TargetType="{x:Type ComboBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                            <Setter Property="Width" Value="50"/>
                                            <Setter Property="Height" Value="25"/>
                                            <Setter Property="HorizontalAlignment" Value="Left"/>
                                        </Style>
                                    </StackPanel.Resources>
                                    <TextBlock Text="Album List Max" HorizontalAlignment="Left" Width="Auto"/>
                                    <ComboBox x:Name="AlbumListMaxComboBox" HorizontalAlignment="Left" Width="75" ToolTip="Maximum number of albums to be returned when viewing album lists"/>
                                    <TextBlock Text="Max Search Results" HorizontalAlignment="Left" Width="Auto"/>
                                    <ComboBox x:Name="MaxSearchResultsComboBox" HorizontalAlignment="Left" Width="75" ToolTip="Maximum number of albums/tracks to be returned when searching"/>
                                </StackPanel>
                            </Expander>
                            <Expander Header="Interface Preferences" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <StackPanel.Resources>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                        <Style TargetType="{x:Type ComboBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                            <Setter Property="Width" Value="75"/>
                                            <Setter Property="Height" Value="25"/>
                                            <Setter Property="HorizontalAlignment" Value="Left"/>                                            
                                        </Style>
                                        <Style TargetType="{x:Type CheckBox}">
                                            <Setter Property="Margin" Value="10,2,0,2"/>
                                        </Style>
                                    </StackPanel.Resources>
                                    <CheckBox x:Name="ShowAlbumArtCheckBox" Content="Show Album Art" HorizontalAlignment="Left" Checked="ShowAlbumArtCheckboxChecked" Unchecked="ShowAlbumArtCheckboxUnChecked" ToolTip="If enabled, show cover art in Album and Now Playing views"/>
                                    <TextBlock Text="Throttle Image Loading"/>
                                    <ComboBox x:Name="ThrottleComboBox" ToolTip="Limit simultaneous loading of cover art to this value, set to 0 to disable throttling"/>
                                    <TextBlock Text="Album Art Size"/>
                                    <TextBox x:Name="AlbumArtSizeTextBox" HorizontalAlignment="Left" Width="50" ToolTip="Width of cover art in Album and Now Playing views"/>
                                </StackPanel>
                            </Expander>
                        </StackPanel>
                    </ScrollViewer>
                    <ScrollViewer VerticalScrollBarVisibility="Auto" Grid.Column="1" Grid.ColumnSpan="1">
                        <StackPanel>
                            <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" BorderThickness="1">
                                <TextBlock Text="Server Information" FontWeight="Bold" FontSize="12" Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" HorizontalAlignment="Center"/>
                            </Border>
                            <DockPanel>
                                <TextBlock Text="REST API:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="ServerApiLabel" Margin="0,2,10,2"/>
                            </DockPanel>
                            <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" BorderThickness="1">
                                <TextBlock Text="License Information" FontWeight="Bold" FontSize="12" Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" HorizontalAlignment="Center"/>
                            </Border>
                            <DockPanel>
                                <TextBlock Text="Email:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="LicenseEmailLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Date:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="LicenseDateLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Key:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="LicenseKeyLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Valid:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="LicenseValidLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                        </StackPanel>
                    </ScrollViewer>
                    <ScrollViewer VerticalScrollBarVisibility="Auto" Grid.Column="2" Grid.ColumnSpan="1">
                        <StackPanel>
                            <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" BorderThickness="1">
                                <TextBlock Text="User Information" FontWeight="Bold" FontSize="12" Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" HorizontalAlignment="Center"/>
                            </Border>
                            <DockPanel>
                                <TextBlock Text="Email:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserEmailLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Scrobble:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserScrobblingLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Admin:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserAdminLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Settings:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserSettingsLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Stream:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserStreamLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Jukebox:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserJukeboxLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Download:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserDownloadLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Upload:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserUploadLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Playlist:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserPlaylistLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Cover Art:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserCoverArtLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Comment:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserCommentLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock Text="Podcast:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserPodcastLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <DockPanel>
                                <TextBlock x:Name="UserShareLabel2" Text="Share:" Margin="10,2,10,2"/>
                                <TextBlock x:Name="UserShareLabel" Text="" Margin="0,2,10,2"/>
                            </DockPanel>
                            <Border x:Name="AvatarLabel" DockPanel.Dock="Top" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" BorderThickness="1">
                                <TextBlock Text="User Avatar" FontWeight="Bold" FontSize="12" Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" HorizontalAlignment="Center"/>
                            </Border>
                            <Border x:Name="AvatarBorder" BorderBrush="Black" BorderThickness="1" HorizontalAlignment="Left" Height="48" Width="48" Margin="10,10,10,10">
                                <Image x:Name="AvatarImage" AllowDrop="False" ScrollViewer.VerticalScrollBarVisibility="Disabled"/>
                            </Border>
                        </StackPanel>
                    </ScrollViewer>
                    <DockPanel HorizontalAlignment="Right" VerticalAlignment="Bottom" Grid.Column="2">
                        <DockPanel.Resources>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="Margin" Value="2,0,2,0"/>
                            </Style>
                        </DockPanel.Resources>
                        <Button Content="Save" Width="75" Click="SettingsSaveButtonClick"/>
                        <Button Content="Cancel" Width="75" Click="SettingsCancelButtonClick"/>
                    </DockPanel>
                </Grid>
            </TabItem>
        </TabControl>
        <Image x:Name="MusicCoverArt" Width="40" Height="40" Margin="10,0,0,61" AllowDrop="False" ScrollViewer.VerticalScrollBarVisibility="Disabled" HorizontalAlignment="Left" VerticalAlignment="Bottom" Grid.Column="1" MouseLeftButtonUp="MusicCoverArtMouseLeftButtonUp" RenderTransformOrigin="0.689,0.343"/>
        <StackPanel HorizontalAlignment="Left" VerticalAlignment="Bottom" Grid.Column="1" Height="40" Margin="55,0,0,61" Width="175" MouseLeftButtonUp="TrackInfoStackPanelMouseLeftButtonUp">
            <TextBlock x:Name="MusicArtistLabel" Width="175" FontSize="10" FontWeight="Normal" Margin="0,0,0,0" Height="13"/>
            <TextBlock x:Name="MusicTitleLabel" Width="175" FontSize="10" FontWeight="Medium" Margin="0,0,0,0" Height="13"/>
            <TextBlock x:Name="MusicAlbumLabel" Width="175" FontSize="10" FontWeight="Bold" Margin="0,0,0,0" Height="13"/>
        </StackPanel>
        <Button x:Name="PreviousButton" HorizontalAlignment="Left" Margin="10,0,0,61" VerticalAlignment="Bottom" Width="32" Height="32" Command="MediaCommands.PreviousTrack" ToolTip="Previous Title">
            <Image Source="Images/media-skip-backward.png"/>
        </Button>
        <Button x:Name="StopButton" HorizontalAlignment="Left" Margin="47,0,0,61" VerticalAlignment="Bottom" Width="32" Height="32" Command="MediaCommands.Stop" ToolTip="Stop">
            <Image Source="Images/media-playback-stop.png"/>
        </Button>
        <Button x:Name="PlayButton" HorizontalAlignment="Left" Margin="84,0,0,61" VerticalAlignment="Bottom" Width="45" Height="32" Command="MediaCommands.Play" ToolTip="Play">
            <Image Source="Images/media-playback-start.png"/>
        </Button>
        <Button x:Name="PauseButton" HorizontalAlignment="Left" Margin="134,0,0,61" VerticalAlignment="Bottom" Width="32" Height="32" Command="MediaCommands.Pause" ToolTip="Pause">
            <Image Source="Images/media-playback-pause.png"/>
        </Button>
        <Button x:Name="NextButton" HorizontalAlignment="Left" Margin="171,0,0,61" VerticalAlignment="Bottom" Width="32" Height="32" Command="MediaCommands.NextTrack" ToolTip="Next Title">
            <Image Source="Images/media-skip-forward.png"/>
        </Button>
        <Button x:Name="RepeatButton" HorizontalAlignment="Right" Margin="0,0,266,61" VerticalAlignment="Bottom" Width="32" Height="32" Click="RepeatButtonClick" ToolTip="Repeat: Disabled" Grid.Column="2">
            <Image x:Name="RepeatButtonIcon">
                <Image.Style>
                    <Style TargetType="Image">
                        <Setter Property="Source" Value="/Images/media-playlist-repeat-disabled.png"/>
                        <Style.Triggers>
                            <Trigger Property="Name" Value="RepeatEnabled">
                                <Setter Property="Source" Value="/Images/media-playlist-repeat-enabled.png"/>
                            </Trigger>
                            <Trigger Property="Name" Value="RepeatDisabled">
                                <Setter Property="Source" Value="/Images/media-playlist-repeat-disabled.png"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
        </Button>
        <Button HorizontalAlignment="Right" Margin="0,0,231,61" VerticalAlignment="Bottom" Width="32" Height="32" Click="ShuffleButtonClick" ToolTip="Shuffle Playlist" Grid.Column="2">
            <Image Source="Images/media-playlist-shuffle.png"/>
        </Button>
        <Button x:Name="MuteButton" HorizontalAlignment="Right" Margin="0,0,196,61" VerticalAlignment="Bottom" Height="32" Width="32" Click="MuteButtonClick" ToolTip="Mute Volume" Grid.Column="2">
            <Image x:Name="MuteButtonIcon">
                <Image.Style>
                    <Style TargetType="Image">
                        <Setter Property="Source" Value="/Images/audio-volume-zero-panel.png"/>
                        <Style.Triggers>
                            <Trigger Property="Name" Value="VolumeMuted">
                                <Setter Property="Source" Value="/Images/audio-volume-muted-panel.png"/>
                            </Trigger>
                            <Trigger Property="Name" Value="VolumeZero">
                                <Setter Property="Source" Value="/Images/audio-volume-zero-panel.png"/>
                            </Trigger>
                            <Trigger Property="Name" Value="VolumeLow">
                                <Setter Property="Source" Value="/Images/audio-volume-low-panel.png"/>
                            </Trigger>
                            <Trigger Property="Name" Value="VolumeMedium">
                                <Setter Property="Source" Value="/Images/audio-volume-medium-panel.png"/>
                            </Trigger>
                            <Trigger Property="Name" Value="VolumeHigh">
                                <Setter Property="Source" Value="/Images/audio-volume-high-panel.png"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
        </Button>
        <Slider x:Name="VolumeSlider" Margin="0,0,10,61" VerticalAlignment="Bottom" ValueChanged="VolumeSliderValueChanged" HorizontalAlignment="Right" Width="181" Height="32" VerticalContentAlignment="Center" UseLayoutRounding="True" MinHeight="32" MaxHeight="32" Grid.Column="2"/>
        <Slider x:Name="ProgressSlider" Margin="10,0,10,34" VerticalAlignment="Bottom" PreviewMouseLeftButtonUp="ProgressSliderMouseLeftButtonUp" Height="22" Grid.ColumnSpan="3"/>
        <MediaElement x:Name="MediaPlayer" HorizontalAlignment="Left" Height="1" VerticalAlignment="Top" Width="1" Margin="0,0,0,0" Visibility="Hidden" MediaOpened="MediaPlayerMediaOpened" UnloadedBehavior="Manual" LoadedBehavior="Manual"/>
        <Button Margin="0,0,340,61" VerticalAlignment="Bottom" Width="32" Height="32" Click="NewPlaylistButtonClick" ToolTip="New Playlist" HorizontalAlignment="Right" Grid.Column="1" Grid.ColumnSpan="2">
            <Image Source="Images/document-new.png"/>
        </Button>
        <Button x:Name="SavePlaylistButton" Margin="0,0,303,61" VerticalAlignment="Bottom" Width="32" Height="32" Click="SavePlaylistButtonClick" ToolTip="Save Playlist" HorizontalAlignment="Right" Grid.Column="2">
            <Image Source="Images/document-save.png"/>
        </Button>
        <DockPanel HorizontalAlignment="Right" VerticalAlignment="Top" Grid.Column="1" Grid.ColumnSpan="2" Margin="0,4,10,0">
            <Image Source="Images\filter.png" Width="20" Height="20" Margin="4,0,4,0"/>
            <TextBox x:Name="ArtistFilterTextBox" Width="200" TextChanged="ArtistFilterTextBoxTextChanged" ToolTip="Artist Filter" Height="Auto"/>
            <Separator Margin="4,0,4,0"/>
            <Image Source="Images\stock_search.png" Width="20" Height="20" Margin="4,0,4,0"/>
            <TextBox x:Name="GlobalSearchTextBox" Width="200" KeyDown="GlobalSearchTextBoxKeyDown" ToolTip="Global Search" Height="Auto"/>
        </DockPanel>
    </Grid>
</Window>
